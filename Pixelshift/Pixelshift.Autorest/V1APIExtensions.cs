// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for V1API.
    /// </summary>
    public static partial class V1APIExtensions
    {
            /// <summary>
            /// Endpoint for submitting batches for processing
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='batch'>
            /// The batch to be processed
            /// </param>
            public static BatchStartReportResponse ProcessImageBatch(this IV1API operations, Batch batch = default(Batch))
            {
                return operations.ProcessImageBatchAsync(batch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Endpoint for submitting batches for processing
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='batch'>
            /// The batch to be processed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchStartReportResponse> ProcessImageBatchAsync(this IV1API operations, Batch batch = default(Batch), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProcessImageBatchWithHttpMessagesAsync(batch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all batches
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AllBatchesPageResponse AllBatches(this IV1API operations)
            {
                return operations.AllBatchesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all batches
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AllBatchesPageResponse> AllBatchesAsync(this IV1API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllBatchesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The processing status of a batch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='batchId'>
            /// the id of the batch to query
            /// </param>
            public static BatchReportResponse BatchInfo(this IV1API operations, System.Guid batchId)
            {
                return operations.BatchInfoAsync(batchId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The processing status of a batch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='batchId'>
            /// the id of the batch to query
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchReportResponse> BatchInfoAsync(this IV1API operations, System.Guid batchId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchInfoWithHttpMessagesAsync(batchId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The processing status of a specific operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// the id of the operation
            /// </param>
            public static OperationStatusReportResponse OperationStatus(this IV1API operations, System.Guid operationId)
            {
                return operations.OperationStatusAsync(operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The processing status of a specific operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// the id of the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusReportResponse> OperationStatusAsync(this IV1API operations, System.Guid operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OperationStatusWithHttpMessagesAsync(operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A description of the original operation parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// the operation id
            /// </param>
            public static TransformGraphMetadataEnvelope OperationDescription(this IV1API operations, System.Guid operationId)
            {
                return operations.OperationDescriptionAsync(operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// A description of the original operation parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// the operation id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransformGraphMetadataEnvelope> OperationDescriptionAsync(this IV1API operations, System.Guid operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OperationDescriptionWithHttpMessagesAsync(operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
