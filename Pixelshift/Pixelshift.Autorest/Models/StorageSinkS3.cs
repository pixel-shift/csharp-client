// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the destination location of a branch of the graph. Must
    /// appear at the end of transform sequences (or
    /// as a leaf in the conceptual transform graph) and be immediately
    /// preceded by an ImageFormatTransformPipe
    /// (type:"Image.OutputFormat")
    /// </summary>
    [Newtonsoft.Json.JsonObject("StorageSink_S3")]
    public partial class StorageSinkS3 : TransformUnit
    {
        /// <summary>
        /// Initializes a new instance of the StorageSinkS3 class.
        /// </summary>
        public StorageSinkS3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageSinkS3 class.
        /// </summary>
        /// <param name="destinationKey">Destination key name</param>
        /// <param name="destinationBucket">Destination bucket name</param>
        /// <param name="allowOverwrite">Allow overwrite of destination</param>
        public StorageSinkS3(string destinationKey, string destinationBucket, bool? allowOverwrite = default(bool?))
        {
            DestinationKey = destinationKey;
            DestinationBucket = destinationBucket;
            AllowOverwrite = allowOverwrite;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets destination key name
        /// </summary>
        [JsonProperty(PropertyName = "destinationKey")]
        public string DestinationKey { get; set; }

        /// <summary>
        /// Gets or sets destination bucket name
        /// </summary>
        [JsonProperty(PropertyName = "destinationBucket")]
        public string DestinationBucket { get; set; }

        /// <summary>
        /// Gets or sets allow overwrite of destination
        /// </summary>
        [JsonProperty(PropertyName = "allowOverwrite")]
        public bool? AllowOverwrite { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DestinationKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DestinationKey");
            }
            if (DestinationBucket == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DestinationBucket");
            }
        }
    }
}
