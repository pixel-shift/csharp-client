// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A description of steps for processing images from source to
    /// destination. Can be branched by using the "outputs"
    /// property to allow for multiple transformations on a single source
    /// image.
    /// </summary>
    public partial class TransformGraph
    {
        /// <summary>
        /// Initializes a new instance of the TransformGraph class.
        /// </summary>
        public TransformGraph()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransformGraph class.
        /// </summary>
        /// <param name="transforms">A list of transforms that run one after
        /// another, piping content from one transform to the next</param>
        /// <param name="outputs">A list of output transform graphs, each one
        /// receiving the output of the last transform in the "transforms"
        /// collection</param>
        public TransformGraph(IList<TransformUnit> transforms, IList<TransformGraph> outputs = default(IList<TransformGraph>))
        {
            Transforms = transforms;
            Outputs = outputs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of transforms that run one after another,
        /// piping content from one transform to the next
        /// </summary>
        [JsonProperty(PropertyName = "transforms")]
        public IList<TransformUnit> Transforms { get; set; }

        /// <summary>
        /// Gets or sets a list of output transform graphs, each one receiving
        /// the output of the last transform in the "transforms"
        /// collection
        /// </summary>
        [JsonProperty(PropertyName = "outputs")]
        public IList<TransformGraph> Outputs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Transforms == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Transforms");
            }
            if (Outputs != null)
            {
                foreach (var element in Outputs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
