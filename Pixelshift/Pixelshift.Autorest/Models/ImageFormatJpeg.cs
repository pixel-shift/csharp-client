// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Output to Jpeg
    /// </summary>
    [Newtonsoft.Json.JsonObject("ImageFormat_Jpeg")]
    public partial class ImageFormatJpeg : TransformUnit
    {
        /// <summary>
        /// Initializes a new instance of the ImageFormatJpeg class.
        /// </summary>
        public ImageFormatJpeg()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageFormatJpeg class.
        /// </summary>
        /// <param name="quality">Jpeg quality</param>
        /// <param name="progressive">Create progressive/interlace scan
        /// jpeg</param>
        public ImageFormatJpeg(int? quality = default(int?), bool? progressive = default(bool?))
        {
            Quality = quality;
            Progressive = progressive;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets jpeg quality
        /// </summary>
        [JsonProperty(PropertyName = "quality")]
        public int? Quality { get; set; }

        /// <summary>
        /// Gets or sets create progressive/interlace scan jpeg
        /// </summary>
        [JsonProperty(PropertyName = "progressive")]
        public bool? Progressive { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Quality > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Quality", 100);
            }
            if (Quality < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Quality", 1);
            }
        }
    }
}
