// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the source location of a graph. Must appear only once at the
    /// front of transform sequences (or as the
    /// head element in the conceptual transform graph) and be immediately
    /// preceded by an ImageFormatTransformPipe
    /// such as
    /// ImageFormat_Jpeg/ImageFormat_Tiff/ImageFormat_Png/ImageFormat_Webp
    /// </summary>
    [Newtonsoft.Json.JsonObject("StorageSource_S3")]
    public partial class StorageSourceS3 : TransformUnit
    {
        /// <summary>
        /// Initializes a new instance of the StorageSourceS3 class.
        /// </summary>
        public StorageSourceS3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageSourceS3 class.
        /// </summary>
        /// <param name="sourceKey">Source key name</param>
        /// <param name="sourceBucket">Source bucket name</param>
        public StorageSourceS3(string sourceKey, string sourceBucket)
        {
            SourceKey = sourceKey;
            SourceBucket = sourceBucket;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets source key name
        /// </summary>
        [JsonProperty(PropertyName = "sourceKey")]
        public string SourceKey { get; set; }

        /// <summary>
        /// Gets or sets source bucket name
        /// </summary>
        [JsonProperty(PropertyName = "sourceBucket")]
        public string SourceBucket { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceKey");
            }
            if (SourceBucket == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceBucket");
            }
        }
    }
}
