// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Representation of an RGB color.
    /// </summary>
    public partial class Color
    {
        /// <summary>
        /// Initializes a new instance of the Color class.
        /// </summary>
        public Color()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Color class.
        /// </summary>
        /// <param name="r">The red component.</param>
        /// <param name="g">The green component.</param>
        /// <param name="b">The blue component.</param>
        public Color(int r, int g, int b)
        {
            R = r;
            G = g;
            B = b;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the red component.
        /// </summary>
        [JsonProperty(PropertyName = "r")]
        public int R { get; set; }

        /// <summary>
        /// Gets or sets the green component.
        /// </summary>
        [JsonProperty(PropertyName = "g")]
        public int G { get; set; }

        /// <summary>
        /// Gets or sets the blue component.
        /// </summary>
        [JsonProperty(PropertyName = "b")]
        public int B { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (R > 255)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "R", 255);
            }
            if (R < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "R", 0);
            }
            if (G > 255)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "G", 255);
            }
            if (G < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "G", 0);
            }
            if (B > 255)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "B", 255);
            }
            if (B < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "B", 0);
            }
        }
    }
}
