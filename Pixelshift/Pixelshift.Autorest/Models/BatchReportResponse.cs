// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A summary of batch compute time and pending, failed and completed
    /// operations
    /// </summary>
    public partial class BatchReportResponse
    {
        /// <summary>
        /// Initializes a new instance of the BatchReportResponse class.
        /// </summary>
        public BatchReportResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BatchReportResponse class.
        /// </summary>
        /// <param name="aggregateComputeTime">the total amount of CPU time
        /// spent on this batch. if there are pending operations,
        /// then this figure is not final</param>
        /// <param name="status">True if all operations in batch have been
        /// processed. Possible values include: 'pending', 'finished'</param>
        /// <param name="created">when the batch was submitted</param>
        /// <param name="pending">list of id/summary endpoint for operations
        /// that are still pending</param>
        /// <param name="completed">list of id/summary endpoint for operations
        /// that are completed</param>
        /// <param name="failed">list of id/summary endpoint for operations
        /// that have failed</param>
        public BatchReportResponse(double? aggregateComputeTime = default(double?), BatchStatus? status = default(BatchStatus?), System.DateTime? created = default(System.DateTime?), IList<OperationInfoResponse> pending = default(IList<OperationInfoResponse>), IList<OperationInfoResponse> completed = default(IList<OperationInfoResponse>), IList<OperationInfoResponse> failed = default(IList<OperationInfoResponse>))
        {
            AggregateComputeTime = aggregateComputeTime;
            Status = status;
            Created = created;
            Pending = pending;
            Completed = completed;
            Failed = failed;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the total amount of CPU time spent on this batch. if
        /// there are pending operations,
        /// then this figure is not final
        /// </summary>
        [JsonProperty(PropertyName = "aggregateComputeTime")]
        public double? AggregateComputeTime { get; set; }

        /// <summary>
        /// Gets or sets true if all operations in batch have been processed.
        /// Possible values include: 'pending', 'finished'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public BatchStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets when the batch was submitted
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime? Created { get; set; }

        /// <summary>
        /// Gets or sets list of id/summary endpoint for operations that are
        /// still pending
        /// </summary>
        [JsonProperty(PropertyName = "pending")]
        public IList<OperationInfoResponse> Pending { get; set; }

        /// <summary>
        /// Gets or sets list of id/summary endpoint for operations that are
        /// completed
        /// </summary>
        [JsonProperty(PropertyName = "completed")]
        public IList<OperationInfoResponse> Completed { get; set; }

        /// <summary>
        /// Gets or sets list of id/summary endpoint for operations that have
        /// failed
        /// </summary>
        [JsonProperty(PropertyName = "failed")]
        public IList<OperationInfoResponse> Failed { get; set; }

    }
}
