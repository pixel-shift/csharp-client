// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Creates a border of specified width and color around the source.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Image_Extend")]
    public partial class ImageExtend : TransformUnit
    {
        /// <summary>
        /// Initializes a new instance of the ImageExtend class.
        /// </summary>
        public ImageExtend()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageExtend class.
        /// </summary>
        /// <param name="extend">The width of the border</param>
        /// <param name="background">The color of the border</param>
        public ImageExtend(Bounds extend, Color background)
        {
            Extend = extend;
            Background = background;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the width of the border
        /// </summary>
        [JsonProperty(PropertyName = "extend")]
        public Bounds Extend { get; set; }

        /// <summary>
        /// Gets or sets the color of the border
        /// </summary>
        [JsonProperty(PropertyName = "background")]
        public Color Background { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Extend == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Extend");
            }
            if (Background == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Background");
            }
            if (Extend != null)
            {
                Extend.Validate();
            }
            if (Background != null)
            {
                Background.Validate();
            }
        }
    }
}
