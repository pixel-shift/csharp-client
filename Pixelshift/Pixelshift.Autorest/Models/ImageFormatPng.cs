// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pixelshift.Autorest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Output to Png
    /// </summary>
    [Newtonsoft.Json.JsonObject("ImageFormat_Png")]
    public partial class ImageFormatPng : TransformUnit
    {
        /// <summary>
        /// Initializes a new instance of the ImageFormatPng class.
        /// </summary>
        public ImageFormatPng()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageFormatPng class.
        /// </summary>
        /// <param name="compressionLevel">Png compression level</param>
        /// <param name="progressive">Create progressive/interlace scan
        /// png</param>
        /// <param name="adaptiveFiltering">Use adaptive row filtering</param>
        public ImageFormatPng(int? compressionLevel = default(int?), bool? progressive = default(bool?), bool? adaptiveFiltering = default(bool?))
        {
            CompressionLevel = compressionLevel;
            Progressive = progressive;
            AdaptiveFiltering = adaptiveFiltering;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets png compression level
        /// </summary>
        [JsonProperty(PropertyName = "compressionLevel")]
        public int? CompressionLevel { get; set; }

        /// <summary>
        /// Gets or sets create progressive/interlace scan png
        /// </summary>
        [JsonProperty(PropertyName = "progressive")]
        public bool? Progressive { get; set; }

        /// <summary>
        /// Gets or sets use adaptive row filtering
        /// </summary>
        [JsonProperty(PropertyName = "adaptiveFiltering")]
        public bool? AdaptiveFiltering { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CompressionLevel > 9)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "CompressionLevel", 9);
            }
            if (CompressionLevel < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "CompressionLevel", 0);
            }
        }
    }
}
